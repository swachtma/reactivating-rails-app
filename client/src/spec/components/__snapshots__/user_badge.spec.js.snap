// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProfileIcon /> renders according to snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProfileIcon
    avatar="someurl.png"
    dispatchSignalSignout={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    handleSidebarVisibility={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    username="TestDude"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Dropdown
        additionLabel="Add "
        additionPosition="top"
        closeOnBlur={true}
        compact={true}
        deburr={false}
        icon={
          <Image
            as="img"
            avatar={true}
            src="someurl.png"
            style={
              Object {
                "marginLeft": "1.757px",
                "maxHeight": "32x",
                "maxWidth": "32px",
              }
            }
            ui={true}
          />
        }
        minCharacters={1}
        noResultsMessage="No results found."
        onFocus={
          [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": undefined,
              },
            ],
          }
        }
        openOnFocus={true}
        pointing="top right"
        renderLabel={[Function]}
        searchInput="text"
        selectOnBlur={true}
        selectOnNavigation={true}
        wrapSelection={true}
      >
        <DropdownMenu>
          <DropdownItem
            onClick={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          >
            Sign Out
          </DropdownItem>
        </DropdownMenu>
      </Dropdown>,
      "fitted": true,
      "name": "TestDude",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "additionLabel": "Add ",
        "additionPosition": "top",
        "children": <DropdownMenu>
          <DropdownItem
            onClick={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          >
            Sign Out
          </DropdownItem>
        </DropdownMenu>,
        "closeOnBlur": true,
        "compact": true,
        "deburr": false,
        "icon": <Image
          as="img"
          avatar={true}
          src="someurl.png"
          style={
            Object {
              "marginLeft": "1.757px",
              "maxHeight": "32x",
              "maxWidth": "32px",
            }
          }
          ui={true}
        />,
        "minCharacters": 1,
        "noResultsMessage": "No results found.",
        "onFocus": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "openOnFocus": true,
        "pointing": "top right",
        "renderLabel": [Function],
        "searchInput": "text",
        "selectOnBlur": true,
        "selectOnNavigation": true,
        "wrapSelection": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <DropdownItem
            onClick={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          >
            Sign Out
          </DropdownItem>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Sign Out",
            "onClick": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
          },
          "ref": null,
          "rendered": "Sign Out",
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Dropdown
          additionLabel="Add "
          additionPosition="top"
          closeOnBlur={true}
          compact={true}
          deburr={false}
          icon={
            <Image
              as="img"
              avatar={true}
              src="someurl.png"
              style={
                Object {
                  "marginLeft": "1.757px",
                  "maxHeight": "32x",
                  "maxWidth": "32px",
                }
              }
              ui={true}
            />
          }
          minCharacters={1}
          noResultsMessage="No results found."
          onFocus={
            [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
          openOnFocus={true}
          pointing="top right"
          renderLabel={[Function]}
          searchInput="text"
          selectOnBlur={true}
          selectOnNavigation={true}
          wrapSelection={true}
        >
          <DropdownMenu>
            <DropdownItem
              onClick={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            >
              Sign Out
            </DropdownItem>
          </DropdownMenu>
        </Dropdown>,
        "fitted": true,
        "name": "TestDude",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "additionLabel": "Add ",
          "additionPosition": "top",
          "children": <DropdownMenu>
            <DropdownItem
              onClick={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            >
              Sign Out
            </DropdownItem>
          </DropdownMenu>,
          "closeOnBlur": true,
          "compact": true,
          "deburr": false,
          "icon": <Image
            as="img"
            avatar={true}
            src="someurl.png"
            style={
              Object {
                "marginLeft": "1.757px",
                "maxHeight": "32x",
                "maxWidth": "32px",
              }
            }
            ui={true}
          />,
          "minCharacters": 1,
          "noResultsMessage": "No results found.",
          "onFocus": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": undefined,
              },
            ],
          },
          "openOnFocus": true,
          "pointing": "top right",
          "renderLabel": [Function],
          "searchInput": "text",
          "selectOnBlur": true,
          "selectOnNavigation": true,
          "wrapSelection": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <DropdownItem
              onClick={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            >
              Sign Out
            </DropdownItem>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Sign Out",
              "onClick": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            "ref": null,
            "rendered": "Sign Out",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
